{"version":3,"sources":["JobsContainer.js","JobSources.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["JobsContainer","className","this","props","jobSourceString","jobs","map","job","key","id","title","location","description","slice","href","url","rel","target","React","Component","searchJuju","query","page","jujuContainer","document","createElement","fetch","then","result","text","data","innerHTML","querySelectorAll","Array","prototype","call","index","querySelector","innerText","replace","trim","setState","jujuJobs","state","concat","searchGithub","json","item","div","githubJobs","searchAuthentic","console","log","split","join","listings","listing","company","name","authenticJobs","Search","fields","keywords","onSearchChange","bind","onSubmit","event","Object","assign","value","getJobs","preventDefault","type","placeholder","onChange","onClick","getMoreJobs","App","resultsLimit","githubIndex","jujuIndex","authenticIndex","searchInitiated","JobSources","length","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d970d0f4.chunk.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nclass JobsContainer extends React.Component {\n\n  static propTypes = {\n    jobSourceString: PropTypes.string,\n    jobs: PropTypes.array,\n  }\n  \n  render(){\n        return(\n          <div>\n            <div className=\"section\">\n              <div className=\"title is-2\">\n                {this.props.jobSourceString}\n              </div>\n            </div>\n            <div className=\"job\">\n              {\n                this.props.jobs.map(job => {   \n                  return (\n                    <div key={job.id}>\n                      <p><b>Title: </b>{job.title}</p>\n                      <p><b>Location: </b>{job.location}</p>\n                      <p><b>Description: </b>{job.description.slice(0, 100)+\"...\"}</p>\n                      <p><a href={job.url} rel=\"noopener noreferrer\" target=\"_blank\">Link</a></p>\n                      <br />\n                    </div>\n                  )\n                })\n              } \n            </div>\n          </div> \n        )\n  }\n\n}\n\nexport default JobsContainer","import fetch from \"node-fetch\"\n\n\nfunction searchGithub(location = \"\", query = \"\", page = 0) {\n  //console.log(\"location: \"+location+ \" query: \" + query + \" page:\" + page)\n  let url = `https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json?description=${query}&location=${location}&page=${page}`\n  fetch(url)\n    .then(result => result.json())\n    .then(data => {\n      //console.log(data)\n      let jobs = data.map((item)=> {\n        let div = document.createElement(\"div\")\n        div.innerHTML = item.description\n        let description = div.innerText\n        return {\n          title: item.title,\n          location: item.location,\n          url: item.url,\n          description: description,\n          id: item.id,\n        }\n      })\n      this.setState({githubJobs: this.state.githubJobs.concat(jobs)})\n    })\n}\n\nfunction searchAuthentic (location = \"\", query = \"\", page = 0) {\n  console.log(\"Location: \" + location + \" query: \" + query + \" page: \" + page)\n  query = query.replace(/\\s+/g, \" \").trim().split(\" \").join(\",\")\n  let url = `https://cors-anywhere.herokuapp.com/https://authenticjobs.com/api/?api_key=d6ff48adcf9b56967e2dbdded1d460c4&method=aj.jobs.search&format=json&location=${location}&page=${page}&keywords=${query}`\n  fetch(url)\n    .then(result => result.json())\n    .then(data => {\n      //console.log(data.listings.listing)\n      let jobs = data.listings.listing.map((item) => {\n        let div = document.createElement(\"div\")\n        div.innerHTML = item.description\n        let description = div.innerText\n        //console.log((item.company.location) ? item.company.location.name  : \"N/A\")\n        return {\n          id: item.id,\n          location: (item.company.location) ? item.company.location.name  : \"\",\n          description: description,\n          title: item.title,\n          url: item.url,\n        }\n      })\n      \n      this.setState({authenticJobs: this.state.authenticJobs.concat(jobs)}) \n    })\n}\n\nfunction searchJuju (location = \"\", query = \"\", page = 0) {\n  let jujuContainer = document.createElement(\"div\")\n  let url = `https://cors-anywhere.herokuapp.com/http://www.juju.com/jobs?k=${query}&l=${location}&r=20&page=${page}`\n  return fetch(url)\n    .then(result => result.text())\n    .then(data => {\n      jujuContainer.innerHTML = data\n      let jobs = jujuContainer.querySelectorAll(\".job\")\n      jobs = Array.prototype.slice.call(jobs)\n      //console.log(jobs)\n      jobs = jobs.map((job, index) => {\n        //console.log(job.querySelector(\".company span\").innerText.replace(/[\\(\\)]/g, \"\"))\n        return {\n          id: index+job.querySelector(\".result\").href,\n          url: job.querySelector(\".result\").href,\n          title: job.querySelector(\".result\").innerText,\n          location: job.querySelector(\".company span\").innerText.replace(/[\\(\\)]/g, \"\"),\n          // eslint-disable-next-line no-useless-escape\n          description: job.querySelector(\".description\").innerText.replace(/[\\.{3}]/g, \"\").replace(/\\s\\s+/g, \" \").trim().replace(/more$/, \"\"),\n        }\n      })\n      this.setState({jujuJobs: this.state.jujuJobs.concat(jobs)})\n    })\n}\n\nexport default {\n  searchJuju: searchJuju,\n  searchGithub: searchGithub,\n  searchAuthentic: searchAuthentic,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport \"./App.sass\"\n\n\nclass Search extends React.Component {\n\n  static propTypes = {\n    getJobs: PropTypes.func,\n    getMoreJobs: PropTypes.func,\n  }\n\n  constructor(props){\n    super(props)\n    this.state ={\n      fields: {\n        keywords: \"\",\n        location: \"\",\n      }\n    }\n    this.onSearchChange = this.onSearchChange.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  onSearchChange(event){\n    const fields = Object.assign({}, this.state.fields)\n    fields[event.target.name] = event.target.value\n    this.setState({ fields })\n  }\n\n  onSubmit(event){\n    console.log(\"Submitted\")\n    this.props.getJobs(this.state.fields.location, this.state.fields.keywords)\n    event.preventDefault()\n  }\n\n  render(){\n    return(\n      <div className=\"search\">\n        <form onSubmit={this.onSubmit}>\n          <div className=\"container-flex search-container\">\n            <input \n              className=\"search-input\"\n              name=\"keywords\"\n              type=\"text\" \n              placeholder=\"Keywords\"\n              onChange={this.onSearchChange}\n            >    \n            </input>\n            <input \n              className=\"search-input\"\n              name=\"location\"\n              type=\"text\" \n              placeholder=\"Location\"\n              onChange={this.onSearchChange}\n            >  \n            </input>\n            <div className=\"container-flex buttons-container\">\n              <div type=\"submit\" onClick={this.onSubmit} className=\"search-button\">Submit</div>\n              <div className=\"search-button\" type=\"button\" value=\"Load More\" onClick={this.props.getMoreJobs}>Get More Results</div>  \n            </div>\n          </div>\n        </form>\n        <p className=\"main-title\">Job Search Aggregator</p>\n      </div>\n    )\n  }\n}\n\n\nexport default Search","import React from \"react\"\nimport \"./App.sass\"\nimport JobsContainer from \"./JobsContainer\"\nimport JobSources from \"./JobSources\"\nimport Search from \"./Search\"\n\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      githubJobs: [],\n      jujuJobs: [],\n      authenticJobs: [],\n      resultsLimit: 10,\n      githubIndex: 1,\n      jujuIndex: 0,\n      authenticIndex: 1,\n      keywords: \"\",\n      location: \"\",\n      searchInitiated: false,\n    }\n    this.getJobs = this.getJobs.bind(this)\n    this.getMoreJobs = this.getMoreJobs.bind(this)\n    this.searchGithub = JobSources.searchGithub.bind(this)\n    this.searchJuju = JobSources.searchJuju.bind(this)\n    this.searchAuthentic = JobSources.searchAuthentic.bind(this)\n  }\n\n  getJobs(location, keywords){\n    this.setState({searchInitiated: true})\n    this.setState({resultsLimit: 10})\n    this.setState({githubIndex: 1})\n    this.setState({githubJobs: []})\n    this.setState({jujuIndex: 0})\n    this.setState({jujuJobs: []})\n    this.setState({authenticJobs: []})\n    this.setState({authenticIndex: 1})\n    this.setState({keywords: keywords})\n    this.setState({location: location})\n    this.searchAuthentic(location, keywords, this.state.authenticIndex)\n    this.searchJuju(location, keywords, this.state.jujuIndex)\n    this.searchGithub(location, keywords, this.state.githubIndex)\n  }\n\n  getMoreJobs(){\n    if (this.state.searchInitiated){\n      if (this.state.authenticJobs.length < this.state.resultsLimit + 10) {\n        console.log(this.state.location)\n        this.searchAuthentic(this.state.location, this.state.keywords, this.state.authenticIndex + 1)\n        this.setState({authenticIndex: this.state.authenticIndex + 1})\n        //console.log(\"authentic\"+this.state.authenticIndex)\n      }\n      if (this.state.jujuJobs.length < this.state.resultsLimit + 10) {\n        this.searchJuju(this.state.location, this.state.keywords, this.state.jujuIndex + 1)\n        this.setState({jujuIndex: this.state.jujuIndex + 1})\n      }\n      if (this.state.githubJobs.length < this.state.resultsLimit + 10) {\n        this.searchGithub(this.state.location, this.state.keywords, this.state.githubIndex + 1)\n        this.setState({githubIndex: this.state.githubIndex + 1})\n      }\n      \n      this.setState({resultsLimit: this.state.resultsLimit+10})\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"\">\n          <Search getJobs = {this.getJobs} getMoreJobs = {this.getMoreJobs}/>\n        </header>\n        <div className=\"main container-flex\">\n          <div className=\"column\">\n            <JobsContainer jobSourceString = \"GitHub Jobs\" jobs = {this.state.githubJobs.slice(0,this.state.resultsLimit)} />\n          </div>  \n          <div className=\"column\">\n            <JobsContainer jobSourceString = \"Authentic Jobs\" jobs = {this.state.authenticJobs.slice(0,this.state.resultsLimit)} />\n          </div>\n          <div className=\"column\">\n            <JobsContainer jobSourceString = \"Juju Jobs\" jobs = {this.state.jujuJobs.slice(0,this.state.resultsLimit)}/>\n          </div>\n        </div> \n      </div>\n    )\n  } \n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.sass\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}