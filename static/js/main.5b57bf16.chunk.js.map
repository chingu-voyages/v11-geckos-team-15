{"version":3,"sources":["JobsContainer.js","SavedJobsContainer.js","JobSources.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["JobsContainer","loadingValue","this","props","loading","toString","className","jobSourceString","jobs","map","job","key","id","title","location","description","slice","href","url","rel","target","onClick","addClickHandler","React","Component","SavedJobsContainer","removeClickHandler","searchJuju","query","page","setState","jujuLoading","jujuContainer","document","createElement","fetch","then","result","text","data","innerHTML","querySelectorAll","Array","prototype","call","index","querySelector","innerText","replace","trim","jujuJobs","state","concat","searchGithub","githubLoading","json","item","div","githubJobs","searchAuthentic","authenticLoading","split","join","listings","listing","company","name","authenticJobs","date","Search","fields","keywords","onSearchChange","bind","onSubmit","event","Object","assign","value","getJobs","preventDefault","type","placeholder","onChange","getMoreJobs","App","savedJobs","resultsLimit","githubIndex","jujuIndex","authenticIndex","searchInitiated","JobSources","addSavedJob","removeSavedJob","length","console","log","currentJobs","includes","push","targetJob","filter","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5b57bf16.chunk.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nclass JobsContainer extends React.Component {\n\n  static propTypes = {\n    jobSourceString: PropTypes.string,\n    jobs: PropTypes.array,\n    addClickHandler: PropTypes.func,\n    loading: PropTypes.bool,\n  }\n  \n  render(){\n    let loadingValue = this.props.loading.toString()\n    if (loadingValue === 'false'){\n      loadingValue = \"\"\n    }\n    else {\n      loadingValue = \"Loading...\"\n    }\n        return(\n          <div className=\"jobs\">\n            <div className=\"title\">\n              {this.props.jobSourceString}\n            </div>\n            <div >\n              {\n                this.props.jobs.map(job => {   \n                  return (\n                    <div className=\"job ellipsis\" key={job.id}>\n                      <p><b>Title: </b>{job.title}</p>\n                      <p><b>Location: </b>{job.location}</p>\n                      <p className=\"description\"><b>Description: </b>{job.description.slice(0, 100)+\"...\"}</p>\n                      <p className=\"links-container\"><a className=\"job-button\" href={job.url} rel=\"noopener noreferrer\" target=\"_blank\">Link</a><a className=\"job-button\" onClick={()=>{this.props.addClickHandler(job)}} rel=\"noopener noreferrer\" href=\"javascript:void(0)\" >Save</a></p>\n                    </div>\n                  )\n                })\n              } \n            </div>\n            <div className=\"loading\">\n                {loadingValue}\n              </div>\n          </div> \n        )\n  }\n\n}\n\nexport default JobsContainer","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nclass SavedJobsContainer extends React.Component {\n\n  static propTypes = {\n    jobSourceString: PropTypes.string,\n    jobs: PropTypes.array,\n    removeClickHandler: PropTypes.func,\n  }\n  \n  render(){\n        return(\n          <div className=\"jobs\">\n            <div>\n              <div className=\"title\">\n                {this.props.jobSourceString}\n              </div>\n            </div>\n            <div >\n              {\n                this.props.jobs.map(job => {   \n                  return (\n                    <div className=\"job\" key={job.id}>\n                      <p><b>Title: </b>{job.title}</p>\n                      <p><b>Location: </b>{job.location}</p>\n                      <p><b>Description: </b>{job.description.slice(0, 100)+\"...\"}</p>\n                      <p className=\"links-container\"><a className=\"job-button\" href={job.url} rel=\"noopener noreferrer\" target=\"_blank\">Link</a><a className=\"job-button\" rel=\"noopener noreferrer\" onClick={()=>{this.props.removeClickHandler(job)}} rel=\"noopener noreferrer\" href=\"javascript:void(0)\">Remove</a></p>\n                    </div>\n                  )\n                })\n              } \n            </div>\n          </div> \n        )\n  }\n\n}\n\nexport default SavedJobsContainer","import fetch from \"node-fetch\"\n\n\nfunction searchGithub(location = \"\", query = \"\", page = 0) {\n  this.setState({githubLoading: true})\n  let url = `https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json?description=${query}&location=${location}&page=${page}`\n  fetch(url)\n    .then(result => result.json())\n    .then(data => {\n      let jobs = data.map((item)=> {\n        let div = document.createElement(\"div\")\n        div.innerHTML = item.description\n        let description = div.innerText\n        return {\n          title: item.title,\n          location: item.location,\n          url: item.url,\n          description: description,\n          id: item.id,\n        }\n      })\n      this.setState({githubJobs: this.state.githubJobs.concat(jobs)})\n    }).then(data =>{\n      this.setState({githubLoading: false})\n    })\n}\n\nfunction searchAuthentic (location = \"\", query = \"\", page = 0) {\n  this.setState({authenticLoading: true})\n  query = query.replace(/\\s+/g, \" \").trim().split(\" \").join(\",\")\n  let url = `https://cors-anywhere.herokuapp.com/https://authenticjobs.com/api/?api_key=d6ff48adcf9b56967e2dbdded1d460c4&method=aj.jobs.search&format=json&location=${location}&page=${page}&keywords=${query}`\n  fetch(url)\n    .then(result => result.json())\n    .then(data => {\n      let jobs = data.listings.listing.map((item) => {\n        let div = document.createElement(\"div\")\n        div.innerHTML = item.description\n        let description = div.innerText\n        return {\n          id: item.id,\n          location: (item.company.location) ? item.company.location.name  : \"\",\n          description: description,\n          title: item.title,\n          url: item.url,\n        }\n      })\n      \n      this.setState({authenticJobs: this.state.authenticJobs.concat(jobs)}) \n    }).then(date => {\n      this.setState({authenticLoading: false})\n    })\n}\n\nfunction searchJuju (location = \"\", query = \"\", page = 0) {\n  this.setState({jujuLoading: true})\n  let jujuContainer = document.createElement(\"div\")\n  let url = `https://cors-anywhere.herokuapp.com/http://www.juju.com/jobs?k=${query}&l=${location}&r=20&page=${page}`\n  return fetch(url)\n    .then(result => result.text())\n    .then(data => {\n      jujuContainer.innerHTML = data\n      let jobs = jujuContainer.querySelectorAll(\".job\")\n      jobs = Array.prototype.slice.call(jobs)\n      jobs = jobs.map((job, index) => {\n        return {\n          id: index+job.querySelector(\".result\").href,\n          url: job.querySelector(\".result\").href,\n          title: job.querySelector(\".result\").innerText,\n          location: job.querySelector(\".company span\").innerText.replace(/[\\(\\)]/g, \"\"),\n          description: job.querySelector(\".description\").innerText.replace(/[\\.{3}]/g, \"\").replace(/\\s\\s+/g, \" \").trim().replace(/more$/, \"\"),\n        }\n      })\n      this.setState({jujuJobs: this.state.jujuJobs.concat(jobs)})\n    }).then(data =>{\n      this.setState({jujuLoading: false})\n    })\n}\n\nexport default {\n  searchJuju: searchJuju,\n  searchGithub: searchGithub,\n  searchAuthentic: searchAuthentic,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport \"./App.sass\"\n\n\nclass Search extends React.Component {\n\n  static propTypes = {\n    getJobs: PropTypes.func,\n    getMoreJobs: PropTypes.func,\n  }\n\n  constructor(props){\n    super(props)\n    this.state ={\n      fields: {\n        keywords: \"\",\n        location: \"\",\n      }\n    }\n    this.onSearchChange = this.onSearchChange.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  onSearchChange(event){\n    const fields = Object.assign({}, this.state.fields)\n    fields[event.target.name] = event.target.value\n    this.setState({ fields })\n  }\n\n  onSubmit(event){\n    this.props.getJobs(this.state.fields.location, this.state.fields.keywords)\n    event.preventDefault()\n  }\n\n  render(){\n    return(\n      <div className=\"search\">\n        <form className=\"form\" onSubmit={this.onSubmit}>\n          <div className=\"container-flex search-container\">\n            <input \n              className=\"search-input\"\n              name=\"keywords\"\n              type=\"text\" \n              placeholder=\"Keywords\"\n              onChange={this.onSearchChange}\n            >    \n            </input>\n            <input \n              className=\"search-input\"\n              name=\"location\"\n              type=\"text\" \n              placeholder=\"Location\"\n              onChange={this.onSearchChange}\n            >  \n            </input>\n            <div className=\"container-flex buttons-container\">\n              <div type=\"submit\" onClick={this.onSubmit} className=\"search-button\">Submit</div>\n              <div className=\"search-button\" type=\"button\" value=\"Load More\" onClick={this.props.getMoreJobs}>Get More Results</div>  \n            </div>\n          </div>\n        </form>\n        <p className=\"main-title\">Job Search Aggregator</p>\n      </div>\n    )\n  }\n}\n\n\nexport default Search","import React from \"react\"\nimport \"./App.sass\"\nimport JobsContainer from \"./JobsContainer\"\nimport SavedJobsContainer from \"./SavedJobsContainer\"\nimport JobSources from \"./JobSources\"\nimport Search from \"./Search\"\n\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      githubJobs: [],\n      jujuJobs: [],\n      authenticJobs: [],\n      githubLoading: false,\n      jujuLoading: false,\n      authenticLoading: false,\n      savedJobs: [],\n      resultsLimit: 10,\n      githubIndex: 1,\n      jujuIndex: 0,\n      authenticIndex: 1,\n      keywords: \"\",\n      location: \"\",\n      searchInitiated: false,\n    }\n    this.getJobs = this.getJobs.bind(this)\n    this.getMoreJobs = this.getMoreJobs.bind(this)\n    this.searchGithub = JobSources.searchGithub.bind(this)\n    this.searchJuju = JobSources.searchJuju.bind(this)\n    this.searchAuthentic = JobSources.searchAuthentic.bind(this)\n    this.addSavedJob = this.addSavedJob.bind(this)\n    this.removeSavedJob = this.removeSavedJob.bind(this)\n  }\n\n  getJobs(location, keywords){\n    this.setState({searchInitiated: true})\n    this.setState({resultsLimit: 10})\n    this.setState({githubIndex: 1})\n    this.setState({githubJobs: []})\n    this.setState({jujuIndex: 0})\n    this.setState({jujuJobs: []})\n    this.setState({authenticJobs: []})\n    this.setState({authenticIndex: 1})\n    this.setState({keywords: keywords})\n    this.setState({location: location})\n    this.searchAuthentic(location, keywords, this.state.authenticIndex)\n    this.searchJuju(location, keywords, this.state.jujuIndex)\n    this.searchGithub(location, keywords, this.state.githubIndex)\n  }\n\n  getMoreJobs(){\n    if (this.state.searchInitiated){\n      if (this.state.authenticJobs.length < this.state.resultsLimit + 10) {\n        console.log(this.state.location)\n        this.searchAuthentic(this.state.location, this.state.keywords, this.state.authenticIndex + 1)\n        this.setState({authenticIndex: this.state.authenticIndex + 1})\n      }\n      if (this.state.jujuJobs.length < this.state.resultsLimit + 10) {\n        this.searchJuju(this.state.location, this.state.keywords, this.state.jujuIndex + 1)\n        this.setState({jujuIndex: this.state.jujuIndex + 1})\n      }\n      if (this.state.githubJobs.length < this.state.resultsLimit + 10) {\n        this.searchGithub(this.state.location, this.state.keywords, this.state.githubIndex + 1)\n        this.setState({githubIndex: this.state.githubIndex + 1})\n      }\n      \n      this.setState({resultsLimit: this.state.resultsLimit+10})\n    }\n  }\n\n  addSavedJob(job){\n    let currentJobs = this.state.savedJobs\n    if (!currentJobs.includes(job)) currentJobs.push(job)\n    this.setState({savedJobs: currentJobs})\n  }\n\n  removeSavedJob(targetJob){\n    let currentJobs = this.state.savedJobs\n    currentJobs = currentJobs.filter(job => targetJob.id !== job.id)\n    this.setState({savedJobs: currentJobs})\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"\">\n          <Search getJobs = {this.getJobs} getMoreJobs = {this.getMoreJobs}/>\n        </header>\n        <div className=\"main container-flex\">\n          <div className=\"column\">\n            <JobsContainer loading={this.state.githubLoading} addClickHandler={this.addSavedJob} jobSourceString = \"GitHub Jobs\" jobs = {this.state.githubJobs.slice(0,this.state.resultsLimit)} />\n          </div>  \n          <div className=\"column\">\n            <JobsContainer loading={this.state.authenticLoading} addClickHandler={this.addSavedJob} jobSourceString = \"Authentic Jobs\" jobs = {this.state.authenticJobs.slice(0,this.state.resultsLimit)} />\n          </div>\n          <div className=\"column\">\n            <JobsContainer loading={this.state.jujuLoading} addClickHandler={this.addSavedJob} jobSourceString = \"Juju Jobs\" jobs = {this.state.jujuJobs.slice(0,this.state.resultsLimit)}/>\n          </div>\n          <div className=\"column\">\n            <SavedJobsContainer removeClickHandler={this.removeSavedJob} jobSourceString = \"Saved Jobs\" jobs={this.state.savedJobs}/>\n          </div>\n        </div> \n      </div>\n    )\n  } \n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.sass\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}